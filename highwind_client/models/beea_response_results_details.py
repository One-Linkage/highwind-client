# coding: utf-8

"""
    Highwind AI Solution - Document Verifier

    The Highwind AI Document Verifier provides an easy way to analyse financial related documents (financial statements, purchase orders, etc) as an API service for clients.   ## Flow `get_upload_url` **-->** `PUT` presigned URL **-->** Highwind AI Solution analyses `pdf` file **-->** `get_results`  ## Endpoints ### 1. Upload Document: get_upload_url/{object}?document-type={type} - This endpoint generates two items:   - A presigned URL required to upload the file to our storage system.   - A unique `task_id` which is associated with the presigned URL - You need to use this presigned URL to upload the `pdf` file (currently, only `pdf` files are accepted) for analysis with a `PUT` request    - Content type is `application/pdf`   - Files should be ideally kept under 5mb in size. - `{object}` is a string field which will be the name of the file that is uploaded to the storage system. - `{type}` is the string query parameter that determines the type of document that will be analysed. For example:   - `?document-type=afs` for annual financial statements    - `?document-type=bs` for bank statements    ### 2. Post document to presigned URL using PUT - To use the presigned URL from step 1: Send a PUT request with the curl command. Include the full path to your file and the presigned URL itself. - Command: ```curl -X PUT -T \"/path/to/file\" \"presigned URL\"```    ### 3. Get Results: get_results/{object} - This endpoint returns the summary of the `pdf` file that was uploaded via the presigned URL.   - It takes about 1 - 2 minutes to generate the summary. For larger files it will take more time. It will return `in_progress` while it analysing the `pdf` file. - `{object}` is a string field for you to add the generated `task_id` to look up the associated summary.    `OPTIONS` endpoints are for CORS purposes only.    ### Links 

    The version of the OpenAPI document: 3.0
    Contact: admin@melio.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from highwind_client.models.afs_response_results_details_document_recent import AFSResponseResultsDetailsDocumentRecent
from highwind_client.models.afs_response_results_details_statement_of_financial_position import AFSResponseResultsDetailsStatementOfFinancialPosition
from highwind_client.models.bcl_response_results_details_bank_branch_code import BCLResponseResultsDetailsBankBranchCode
from highwind_client.models.bcl_response_results_details_date_issued import BCLResponseResultsDetailsDateIssued
from highwind_client.models.bcl_response_results_details_verification_statement import BCLResponseResultsDetailsVerificationStatement
from highwind_client.models.beea_response_results_details_black_ownership_designated_group_percentage import BEEAResponseResultsDetailsBlackOwnershipDesignatedGroupPercentage
from highwind_client.models.beea_response_results_details_black_ownership_percentage import BEEAResponseResultsDetailsBlackOwnershipPercentage
from highwind_client.models.beea_response_results_details_full_name import BEEAResponseResultsDetailsFullName
from highwind_client.models.beea_response_results_details_id_number import BEEAResponseResultsDetailsIdNumber
from highwind_client.models.po_response_results_details_vendor_name import POResponseResultsDetailsVendorName
from typing import Optional, Set
from typing_extensions import Self

class BEEAResponseResultsDetails(BaseModel):
    """
    BEEAResponseResultsDetails
    """ # noqa: E501
    full_name: Optional[BEEAResponseResultsDetailsFullName] = None
    id_number: Optional[BEEAResponseResultsDetailsIdNumber] = None
    deponent_signature: Optional[AFSResponseResultsDetailsStatementOfFinancialPosition] = None
    deponent_signature_date: Optional[BCLResponseResultsDetailsDateIssued] = None
    document_recent: Optional[AFSResponseResultsDetailsDocumentRecent] = None
    enterprise_name: Optional[POResponseResultsDetailsVendorName] = None
    enterprise_registration_number: Optional[BCLResponseResultsDetailsBankBranchCode] = None
    nature_of_business: Optional[BCLResponseResultsDetailsVerificationStatement] = None
    commissioner_of_oaths_stamp_signature: Optional[AFSResponseResultsDetailsStatementOfFinancialPosition] = None
    commissioner_of_oaths_stamp_signature_date: Optional[AFSResponseResultsDetailsStatementOfFinancialPosition] = None
    black_ownership_percentage: Optional[BEEAResponseResultsDetailsBlackOwnershipPercentage] = None
    black_ownership_female_percentage: Optional[BEEAResponseResultsDetailsBlackOwnershipPercentage] = None
    black_ownership_designated_group_percentage: Optional[BEEAResponseResultsDetailsBlackOwnershipDesignatedGroupPercentage] = None
    black_designated_group_owned_percentage_breakdown_youth: Optional[BEEAResponseResultsDetailsBlackOwnershipPercentage] = None
    black_designated_group_owned_percentage_breakdown_disabled: Optional[BEEAResponseResultsDetailsBlackOwnershipPercentage] = None
    black_designated_group_owned_percentage_breakdown_unemployed: Optional[BEEAResponseResultsDetailsBlackOwnershipPercentage] = None
    black_designated_group_owned_percentage_breakdown_rural: Optional[BEEAResponseResultsDetailsBlackOwnershipPercentage] = None
    black_designated_group_owned_percentage_breakdown_veterans: Optional[BEEAResponseResultsDetailsBlackOwnershipPercentage] = None
    __properties: ClassVar[List[str]] = ["full_name", "id_number", "deponent_signature", "deponent_signature_date", "document_recent", "enterprise_name", "enterprise_registration_number", "nature_of_business", "commissioner_of_oaths_stamp_signature", "commissioner_of_oaths_stamp_signature_date", "black_ownership_percentage", "black_ownership_female_percentage", "black_ownership_designated_group_percentage", "black_designated_group_owned_percentage_breakdown_youth", "black_designated_group_owned_percentage_breakdown_disabled", "black_designated_group_owned_percentage_breakdown_unemployed", "black_designated_group_owned_percentage_breakdown_rural", "black_designated_group_owned_percentage_breakdown_veterans"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BEEAResponseResultsDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of full_name
        if self.full_name:
            _dict['full_name'] = self.full_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of id_number
        if self.id_number:
            _dict['id_number'] = self.id_number.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deponent_signature
        if self.deponent_signature:
            _dict['deponent_signature'] = self.deponent_signature.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deponent_signature_date
        if self.deponent_signature_date:
            _dict['deponent_signature_date'] = self.deponent_signature_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of document_recent
        if self.document_recent:
            _dict['document_recent'] = self.document_recent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enterprise_name
        if self.enterprise_name:
            _dict['enterprise_name'] = self.enterprise_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enterprise_registration_number
        if self.enterprise_registration_number:
            _dict['enterprise_registration_number'] = self.enterprise_registration_number.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nature_of_business
        if self.nature_of_business:
            _dict['nature_of_business'] = self.nature_of_business.to_dict()
        # override the default output from pydantic by calling `to_dict()` of commissioner_of_oaths_stamp_signature
        if self.commissioner_of_oaths_stamp_signature:
            _dict['commissioner_of_oaths_stamp_signature'] = self.commissioner_of_oaths_stamp_signature.to_dict()
        # override the default output from pydantic by calling `to_dict()` of commissioner_of_oaths_stamp_signature_date
        if self.commissioner_of_oaths_stamp_signature_date:
            _dict['commissioner_of_oaths_stamp_signature_date'] = self.commissioner_of_oaths_stamp_signature_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of black_ownership_percentage
        if self.black_ownership_percentage:
            _dict['black_ownership_percentage'] = self.black_ownership_percentage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of black_ownership_female_percentage
        if self.black_ownership_female_percentage:
            _dict['black_ownership_female_percentage'] = self.black_ownership_female_percentage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of black_ownership_designated_group_percentage
        if self.black_ownership_designated_group_percentage:
            _dict['black_ownership_designated_group_percentage'] = self.black_ownership_designated_group_percentage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of black_designated_group_owned_percentage_breakdown_youth
        if self.black_designated_group_owned_percentage_breakdown_youth:
            _dict['black_designated_group_owned_percentage_breakdown_youth'] = self.black_designated_group_owned_percentage_breakdown_youth.to_dict()
        # override the default output from pydantic by calling `to_dict()` of black_designated_group_owned_percentage_breakdown_disabled
        if self.black_designated_group_owned_percentage_breakdown_disabled:
            _dict['black_designated_group_owned_percentage_breakdown_disabled'] = self.black_designated_group_owned_percentage_breakdown_disabled.to_dict()
        # override the default output from pydantic by calling `to_dict()` of black_designated_group_owned_percentage_breakdown_unemployed
        if self.black_designated_group_owned_percentage_breakdown_unemployed:
            _dict['black_designated_group_owned_percentage_breakdown_unemployed'] = self.black_designated_group_owned_percentage_breakdown_unemployed.to_dict()
        # override the default output from pydantic by calling `to_dict()` of black_designated_group_owned_percentage_breakdown_rural
        if self.black_designated_group_owned_percentage_breakdown_rural:
            _dict['black_designated_group_owned_percentage_breakdown_rural'] = self.black_designated_group_owned_percentage_breakdown_rural.to_dict()
        # override the default output from pydantic by calling `to_dict()` of black_designated_group_owned_percentage_breakdown_veterans
        if self.black_designated_group_owned_percentage_breakdown_veterans:
            _dict['black_designated_group_owned_percentage_breakdown_veterans'] = self.black_designated_group_owned_percentage_breakdown_veterans.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BEEAResponseResultsDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "full_name": BEEAResponseResultsDetailsFullName.from_dict(obj["full_name"]) if obj.get("full_name") is not None else None,
            "id_number": BEEAResponseResultsDetailsIdNumber.from_dict(obj["id_number"]) if obj.get("id_number") is not None else None,
            "deponent_signature": AFSResponseResultsDetailsStatementOfFinancialPosition.from_dict(obj["deponent_signature"]) if obj.get("deponent_signature") is not None else None,
            "deponent_signature_date": BCLResponseResultsDetailsDateIssued.from_dict(obj["deponent_signature_date"]) if obj.get("deponent_signature_date") is not None else None,
            "document_recent": AFSResponseResultsDetailsDocumentRecent.from_dict(obj["document_recent"]) if obj.get("document_recent") is not None else None,
            "enterprise_name": POResponseResultsDetailsVendorName.from_dict(obj["enterprise_name"]) if obj.get("enterprise_name") is not None else None,
            "enterprise_registration_number": BCLResponseResultsDetailsBankBranchCode.from_dict(obj["enterprise_registration_number"]) if obj.get("enterprise_registration_number") is not None else None,
            "nature_of_business": BCLResponseResultsDetailsVerificationStatement.from_dict(obj["nature_of_business"]) if obj.get("nature_of_business") is not None else None,
            "commissioner_of_oaths_stamp_signature": AFSResponseResultsDetailsStatementOfFinancialPosition.from_dict(obj["commissioner_of_oaths_stamp_signature"]) if obj.get("commissioner_of_oaths_stamp_signature") is not None else None,
            "commissioner_of_oaths_stamp_signature_date": AFSResponseResultsDetailsStatementOfFinancialPosition.from_dict(obj["commissioner_of_oaths_stamp_signature_date"]) if obj.get("commissioner_of_oaths_stamp_signature_date") is not None else None,
            "black_ownership_percentage": BEEAResponseResultsDetailsBlackOwnershipPercentage.from_dict(obj["black_ownership_percentage"]) if obj.get("black_ownership_percentage") is not None else None,
            "black_ownership_female_percentage": BEEAResponseResultsDetailsBlackOwnershipPercentage.from_dict(obj["black_ownership_female_percentage"]) if obj.get("black_ownership_female_percentage") is not None else None,
            "black_ownership_designated_group_percentage": BEEAResponseResultsDetailsBlackOwnershipDesignatedGroupPercentage.from_dict(obj["black_ownership_designated_group_percentage"]) if obj.get("black_ownership_designated_group_percentage") is not None else None,
            "black_designated_group_owned_percentage_breakdown_youth": BEEAResponseResultsDetailsBlackOwnershipPercentage.from_dict(obj["black_designated_group_owned_percentage_breakdown_youth"]) if obj.get("black_designated_group_owned_percentage_breakdown_youth") is not None else None,
            "black_designated_group_owned_percentage_breakdown_disabled": BEEAResponseResultsDetailsBlackOwnershipPercentage.from_dict(obj["black_designated_group_owned_percentage_breakdown_disabled"]) if obj.get("black_designated_group_owned_percentage_breakdown_disabled") is not None else None,
            "black_designated_group_owned_percentage_breakdown_unemployed": BEEAResponseResultsDetailsBlackOwnershipPercentage.from_dict(obj["black_designated_group_owned_percentage_breakdown_unemployed"]) if obj.get("black_designated_group_owned_percentage_breakdown_unemployed") is not None else None,
            "black_designated_group_owned_percentage_breakdown_rural": BEEAResponseResultsDetailsBlackOwnershipPercentage.from_dict(obj["black_designated_group_owned_percentage_breakdown_rural"]) if obj.get("black_designated_group_owned_percentage_breakdown_rural") is not None else None,
            "black_designated_group_owned_percentage_breakdown_veterans": BEEAResponseResultsDetailsBlackOwnershipPercentage.from_dict(obj["black_designated_group_owned_percentage_breakdown_veterans"]) if obj.get("black_designated_group_owned_percentage_breakdown_veterans") is not None else None
        })
        return _obj


