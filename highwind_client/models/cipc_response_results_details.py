# coding: utf-8

"""
    Highwind AI Solution - Document Verifier

    The Highwind AI Document Verifier provides an easy way to analyse financial related documents (financial statements, purchase orders, etc) as an API service for clients.   ## Flow `get_upload_url` **-->** `PUT` presigned URL **-->** Highwind AI Solution analyses `pdf` file **-->** `get_results`  ## Endpoints ### 1. Upload Document: get_upload_url/{object}?document-type={type} - This endpoint generates two items:   - A presigned URL required to upload the file to our storage system.   - A unique `task_id` which is associated with the presigned URL - You need to use this presigned URL to upload the `pdf` file (currently, only `pdf` files are accepted) for analysis with a `PUT` request    - Content type is `application/pdf`   - Files should be ideally kept under 5mb in size. - `{object}` is a string field which will be the name of the file that is uploaded to the storage system. - `{type}` is the string query parameter that determines the type of document that will be analysed. For example:   - `?document-type=afs` for annual financial statements    - `?document-type=bs` for bank statements    ### 2. Post document to presigned URL using PUT - To use the presigned URL from step 1: Send a PUT request with the curl command. Include the full path to your file and the presigned URL itself. - Command: ```curl -X PUT -T \"/path/to/file\" \"presigned URL\"```    ### 3. Get Results: get_results/{object} - This endpoint returns the summary of the `pdf` file that was uploaded via the presigned URL.   - It takes about 1 - 2 minutes to generate the summary. For larger files it will take more time. It will return `in_progress` while it analysing the `pdf` file. - `{object}` is a string field for you to add the generated `task_id` to look up the associated summary.    `OPTIONS` endpoints are for CORS purposes only.    ### Links 

    The version of the OpenAPI document: 3.0
    Contact: admin@melio.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from highwind_client.models.afs_response_results_details_document_recent import AFSResponseResultsDetailsDocumentRecent
from highwind_client.models.bcl_response_results_details_date_issued import BCLResponseResultsDetailsDateIssued
from highwind_client.models.beea_response_results_details_full_name import BEEAResponseResultsDetailsFullName
from highwind_client.models.cipc_response_results_details_certificate_type import CIPCResponseResultsDetailsCertificateType
from highwind_client.models.cipc_response_results_details_date_of_birth_or_id_number import CIPCResponseResultsDetailsDateOfBirthOrIdNumber
from highwind_client.models.cipc_response_results_details_enterprise_name import CIPCResponseResultsDetailsEnterpriseName
from highwind_client.models.cipc_response_results_details_enterprise_postal_address import CIPCResponseResultsDetailsEnterprisePostalAddress
from highwind_client.models.cipc_response_results_details_enterprise_status import CIPCResponseResultsDetailsEnterpriseStatus
from highwind_client.models.cipc_response_results_details_enterprise_type import CIPCResponseResultsDetailsEnterpriseType
from highwind_client.models.cipc_response_results_details_financial_year_end import CIPCResponseResultsDetailsFinancialYearEnd
from highwind_client.models.cipc_response_results_details_registration_number import CIPCResponseResultsDetailsRegistrationNumber
from highwind_client.models.cipc_response_results_details_tax_number_optional import CIPCResponseResultsDetailsTaxNumberOptional
from highwind_client.models.lgs_response_results_details_company_address import LGSResponseResultsDetailsCompanyAddress
from typing import Optional, Set
from typing_extensions import Self

class CIPCResponseResultsDetails(BaseModel):
    """
    CIPCResponseResultsDetails
    """ # noqa: E501
    certificate_issue_date: Optional[BCLResponseResultsDetailsDateIssued] = None
    document_recent: Optional[AFSResponseResultsDetailsDocumentRecent] = None
    certificate_type: Optional[CIPCResponseResultsDetailsCertificateType] = None
    enterprise_name: Optional[CIPCResponseResultsDetailsEnterpriseName] = None
    registration_number: Optional[CIPCResponseResultsDetailsRegistrationNumber] = None
    registration_date: Optional[BCLResponseResultsDetailsDateIssued] = None
    business_start_date: Optional[BCLResponseResultsDetailsDateIssued] = None
    enterprise_type: Optional[CIPCResponseResultsDetailsEnterpriseType] = None
    enterprise_status: Optional[CIPCResponseResultsDetailsEnterpriseStatus] = None
    financial_year_end: Optional[CIPCResponseResultsDetailsFinancialYearEnd] = None
    tax_number_optional: Optional[CIPCResponseResultsDetailsTaxNumberOptional] = None
    enterprise_postal_address: Optional[CIPCResponseResultsDetailsEnterprisePostalAddress] = None
    enterprise_address_of_registered_office: Optional[LGSResponseResultsDetailsCompanyAddress] = None
    director_full_names: Optional[BEEAResponseResultsDetailsFullName] = None
    date_of_birth_or_id_number: Optional[CIPCResponseResultsDetailsDateOfBirthOrIdNumber] = None
    __properties: ClassVar[List[str]] = ["certificate_issue_date", "document_recent", "certificate_type", "enterprise_name", "registration_number", "registration_date", "business_start_date", "enterprise_type", "enterprise_status", "financial_year_end", "tax_number_optional", "enterprise_postal_address", "enterprise_address_of_registered_office", "director_full_names", "date_of_birth_or_id_number"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CIPCResponseResultsDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of certificate_issue_date
        if self.certificate_issue_date:
            _dict['certificate_issue_date'] = self.certificate_issue_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of document_recent
        if self.document_recent:
            _dict['document_recent'] = self.document_recent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of certificate_type
        if self.certificate_type:
            _dict['certificate_type'] = self.certificate_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enterprise_name
        if self.enterprise_name:
            _dict['enterprise_name'] = self.enterprise_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of registration_number
        if self.registration_number:
            _dict['registration_number'] = self.registration_number.to_dict()
        # override the default output from pydantic by calling `to_dict()` of registration_date
        if self.registration_date:
            _dict['registration_date'] = self.registration_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of business_start_date
        if self.business_start_date:
            _dict['business_start_date'] = self.business_start_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enterprise_type
        if self.enterprise_type:
            _dict['enterprise_type'] = self.enterprise_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enterprise_status
        if self.enterprise_status:
            _dict['enterprise_status'] = self.enterprise_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of financial_year_end
        if self.financial_year_end:
            _dict['financial_year_end'] = self.financial_year_end.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_number_optional
        if self.tax_number_optional:
            _dict['tax_number_optional'] = self.tax_number_optional.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enterprise_postal_address
        if self.enterprise_postal_address:
            _dict['enterprise_postal_address'] = self.enterprise_postal_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enterprise_address_of_registered_office
        if self.enterprise_address_of_registered_office:
            _dict['enterprise_address_of_registered_office'] = self.enterprise_address_of_registered_office.to_dict()
        # override the default output from pydantic by calling `to_dict()` of director_full_names
        if self.director_full_names:
            _dict['director_full_names'] = self.director_full_names.to_dict()
        # override the default output from pydantic by calling `to_dict()` of date_of_birth_or_id_number
        if self.date_of_birth_or_id_number:
            _dict['date_of_birth_or_id_number'] = self.date_of_birth_or_id_number.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CIPCResponseResultsDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "certificate_issue_date": BCLResponseResultsDetailsDateIssued.from_dict(obj["certificate_issue_date"]) if obj.get("certificate_issue_date") is not None else None,
            "document_recent": AFSResponseResultsDetailsDocumentRecent.from_dict(obj["document_recent"]) if obj.get("document_recent") is not None else None,
            "certificate_type": CIPCResponseResultsDetailsCertificateType.from_dict(obj["certificate_type"]) if obj.get("certificate_type") is not None else None,
            "enterprise_name": CIPCResponseResultsDetailsEnterpriseName.from_dict(obj["enterprise_name"]) if obj.get("enterprise_name") is not None else None,
            "registration_number": CIPCResponseResultsDetailsRegistrationNumber.from_dict(obj["registration_number"]) if obj.get("registration_number") is not None else None,
            "registration_date": BCLResponseResultsDetailsDateIssued.from_dict(obj["registration_date"]) if obj.get("registration_date") is not None else None,
            "business_start_date": BCLResponseResultsDetailsDateIssued.from_dict(obj["business_start_date"]) if obj.get("business_start_date") is not None else None,
            "enterprise_type": CIPCResponseResultsDetailsEnterpriseType.from_dict(obj["enterprise_type"]) if obj.get("enterprise_type") is not None else None,
            "enterprise_status": CIPCResponseResultsDetailsEnterpriseStatus.from_dict(obj["enterprise_status"]) if obj.get("enterprise_status") is not None else None,
            "financial_year_end": CIPCResponseResultsDetailsFinancialYearEnd.from_dict(obj["financial_year_end"]) if obj.get("financial_year_end") is not None else None,
            "tax_number_optional": CIPCResponseResultsDetailsTaxNumberOptional.from_dict(obj["tax_number_optional"]) if obj.get("tax_number_optional") is not None else None,
            "enterprise_postal_address": CIPCResponseResultsDetailsEnterprisePostalAddress.from_dict(obj["enterprise_postal_address"]) if obj.get("enterprise_postal_address") is not None else None,
            "enterprise_address_of_registered_office": LGSResponseResultsDetailsCompanyAddress.from_dict(obj["enterprise_address_of_registered_office"]) if obj.get("enterprise_address_of_registered_office") is not None else None,
            "director_full_names": BEEAResponseResultsDetailsFullName.from_dict(obj["director_full_names"]) if obj.get("director_full_names") is not None else None,
            "date_of_birth_or_id_number": CIPCResponseResultsDetailsDateOfBirthOrIdNumber.from_dict(obj["date_of_birth_or_id_number"]) if obj.get("date_of_birth_or_id_number") is not None else None
        })
        return _obj


